#pragma config(Sensor, in1,    centerIR,       sensorLineFollower)
#pragma config(Sensor, in2,    rightIR,        sensorLineFollower)
#pragma config(Sensor, in3,    leftIR,         sensorLineFollower)
#pragma config(Sensor, dgtl1,  LimitSwitch,    sensorTouch)
#pragma config(Sensor, dgtl2,  LimitSwitch2,   sensorTouch)
#pragma config(Sensor, dgtl3,  LimitSwitch3,   sensorTouch)
#pragma config(Motor,  port2,           rightMotor,    tmotorServoContinuousRotation, openLoop, reversed, driveRight)
#pragma config(Motor,  port3,           leftMotor,     tmotorServoContinuousRotation, openLoop, driveLeft)
#pragma config(Motor,  port4,           Servo3,        tmotorServoStandard, openLoop)
#pragma config(Motor,  port5,           Servo,         tmotorServoStandard, openLoop)
#pragma config(Motor,  port6,           ElvtorMotor,   tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port7,           Servo4,        tmotorServoStandard, openLoop)
#pragma config(Motor,  port8,           RotateMotor,   tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port9,           Servo2,        tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

#pragma autonomousDuration(15)
#pragma userControlDuration(120)
// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton() {
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


// Slower line follower that handles the tight curve
task autonomous() {
	if (SensorValue(rightIR) > 200 ) {
		setMotor(rightMotor, -50);
	}

	if (SensorValue(rightIR) < 200) {
		setMotor(rightMotor, -0);
	}

	 if (SensorValue (leftIR) > 200) {
		setMotor(leftMotor, -50);
	}

	if (SensorValue (leftIR) < 200) {
	 	setMotor(leftMotor, -0);
	}
}

//Faster line follower to get it done faster
task autonomous2() {
	if (SensorValue(rightIR) > 200 ) {
		setMotor(rightMotor, -70);
	}

	if (SensorValue(rightIR) < 200) {
		setMotor(rightMotor, -10);
	}

	 if (SensorValue (leftIR) > 200) {
		setMotor(leftMotor, -70);
	}

	if (SensorValue (leftIR) < 200) {
	 	setMotor(leftMotor, -10);
	}
}



/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol() {
	while (true) {
		enableCompetitionMode();

		//An arcade control that allows motors to run at full speed, instead of half speed provided by the function
		motor[leftMotor] = (vexRT[Ch3] + vexRT[Ch4]);
		motor[rightMotor] = (vexRT[Ch3] - vexRT[Ch4]);


		if (vexRT[Btn7R]) {						//Button that opens claw
			setMotor(Servo, 180);
			setMotor(Servo2, 180);
		}	else if (vexRT[Btn7L]) {		//Button that closes claw
			setMotor(Servo, -180);
			setMotor(Servo2, -180);
		}	else if (vexRT[Btn7U]) {		//Button sets the claw to rotate
			setMotor(Servo3, 180);
			setMotor(Servo4, -180);
		}	else if (vexRT[Btn7D]) {		//Button rotates claw back to original position
			setMotor(Servo3, -180);
			setMotor(Servo4, 180);
		}

		if (vexRT[Btn6U] == 1) {
			setMotor(ElvtorMotor, -127);
		}	else if  (vexRT[Btn6D] == 1 && SensorValue[LimitSwitch] == 1){
			setMotor(ElvtorMotor,127);
		}	else if (vexRT[Btn6D] == 1 && SensorValue[LimitSwitch] == 0) {
			setMotor(ElvtorMotor,127);
		}	else {
			setMotor(ElvtorMotor, 0);
		};

		if  (SensorValue[LimitSwitch] == 0) {
			setMotor(ElvtorMotor,0);
		}

		if  (SensorValue[LimitSwitch3] == 0) {
			setMotor(ElvtorMotor,0);
		}




	/*	if	(vexRT[Btn8L]) {
			setMotor(RotateMotor, -127);
		}	else*/ if (vexRT[Btn8R]) {
			setMotor(RotateMotor, 127);
		} else if (vexRT[Btn8L] && SensorValue[LimitSwitch2] == 0 ||vexRT[Btn8L] && SensorValue[LimitSwitch2] == 1 ) {
		setMotor(RotateMotor, -127);
	  } else {
			setMotor(RotateMotor, 0);
		}

if  (SensorValue[LimitSwitch2] == 0) {
			setMotor(RotateMotor,0);
		}
		/*
		This sets our line follower to a single button, The timer will start and the first, fast autonomous will go, then when y is greater
		than 45000 the slower autonomous will run to handle the tight curve better.
		Then finally the fast autonomous will run again when y is greater that 68000
		*/
		if (vexRT [Btn8U]) {
			int y = 1;
			while (y < 20000) {
				startTask(autonomous2);
				y = y+1;
			}
			while (y <40000) {
				startTask(autonomous);
				y = y+1;
			}
			while (y <60000) {
				startTask(autonomous2);
			 y = y+1;
			}
		}

	}
}
